"""
Django settings for DDTrade project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from celery.schedules import crontab


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-6xr9l2une23-k8#1=woo9#_=uv1p=cq_v1-tz+p)1@bbp8&)5b'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'main',
    'user_management',
    'algo',
    'django_celery_beat',
    'django_celery_results'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'DDTrade.urls'
AUTH_USER_MODEL = 'user_management.AccountDetails'
LOGOUT_REDIRECT_URL = '/'  


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR /'main/template/main',BASE_DIR /'user_management/template/user_management', BASE_DIR /'algo/template/algo',BASE_DIR /'DDTrade/template'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
              
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'DDTrade.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'  # Change this line

USE_I18N = True

USE_TZ = True



# settings.py

STATIC_URL = '/static/'

# Celery Configuration
CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Redis URL (local Redis instance)
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'  # Use Redis as the result backend

CELERY_ACCEPT_CONTENT = ['json']               # Accepted content types
CELERY_TASK_SERIALIZER = 'json'                # Serialization format

# Timezone
CELERY_TIMEZONE = 'Asia/Kolkata'
CELERY_ENABLE_UTC = False

CELERY_RESULT_BACKEND = 'django-db'



CELERY_BEAT_SCHEDULE = {
    'execute-trades-at-17-55': {
        'task': 'algo.tasks.execute_subscribed_trades_task',
        'schedule': crontab(minute=40, hour=15),  # This schedules the task at 11:08 AM every day
    },
    'execute-trades-at-17-53': {
        'task': 'algo.tasks.getStock_task',
        'schedule': crontab(minute=30, hour=15),  # This schedules the task at 11:08 AM every day
    },
    'execute-trades-at-17-53': {
        'task': 'algo.tasks.print_L',
        'schedule': crontab(minute="*"),  # This schedules the task at 11:08 AM every day
    },
    'execute-trades-at-17-53': {
        'task': 'algo.tasks.updateWalletStockDetails_task',
        'schedule': crontab(minute=35, hour=15),  # This schedules the task at 11:08 AM every day
    }
}
